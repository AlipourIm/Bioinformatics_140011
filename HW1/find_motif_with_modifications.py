def add_indel(string, index):   # This is the same function I used in my previous solutions...
    new_string = '' + string[:index] + '-' + string[index:]
    return new_string


def find_mutated_motif(s, t):
    score_matrix = [[0 for j in range(len(t)+1)] for i in range(len(s)+1)]
    back_track_matrix = [[0 for j in range(len(t)+1)] for i in range(len(s)+1)]

    for i in range(1, len(s)+1):    # Perform a forward pass
        for j in range(1, len(t)+1):
            if s[i-1] == t[j-1]:
                scores_temporary_matix = [score_matrix[i-1][j] - 1, score_matrix[i][j-1] - 1, score_matrix[i-1][j-1] + 1, 0]
            else:
                scores_temporary_matix = [score_matrix[i-1][j] - 1, score_matrix[i][j-1] - 1, score_matrix[i-1][j-1] - 1, 0]
            score_matrix[i][j] = max(scores_temporary_matix)
            back_track_matrix[i][j] = scores_temporary_matix.index(score_matrix[i][j])

    last_row = score_matrix[len(score_matrix)-1]
    last_col = [score_matrix[i][len(score_matrix[0])-1] for i in range(len(score_matrix))]   # If we could use numpy, this would've been much easier to understand, but i'm fetching elements of last coloumn
    if max(last_row) >= max(last_col):
        index_i = len(s)
        index_j = last_row.index(max(last_row))
    else:
        index_i = last_col.index(max(last_col))
        index_j = len(t)
        
    score_matrix = score_matrix[index_i][index_j] # According to our dp, our answer(max score_matrix) is in cell i, j.
    s_aligned = s[:index_i]
    t_aligned = t
    while index_i*index_j > 0:  # We perform back tracking as we did for previous problems(like my previous answers...)
        if back_track_matrix[index_i][index_j] == 0:
            index_i -= 1
            t_aligned = add_indel(t_aligned, index_j)
        elif back_track_matrix[index_i][index_j] == 1:
            index_j -= 1
            s_aligned = add_indel(s_aligned, index_i)
        else:
            index_i -= 1
            index_j -= 1    
    s_aligned = s_aligned[index_i:]
    final_score = 0
    for i in range(len(t_aligned)):   # Now we compute the hamming distance with the differnece that each match gets 1 and each mismatch gets -1...
        if s_aligned[i] == t_aligned[i]:
            final_score += 1
        else:
            final_score -= 1
    
    return final_score, s_aligned, t_aligned


s = 'GCTTCGCAGACGCGCACATGGCTTTGGTCTCAAAGCGAGGAGCCTGGAAGGTTATTACAAATGGGAAGAATCAATCCTTTCATGGAACTGAACGAGATAGTATGTACATCAATGCCTCCAAAGATAGCTTGAACTCCGACCTAACCGTAGAGCGAAATAAGGATGTTGTGCCGTCAAGTTTTGACGTGAGCGAATCGTTGGTTACTTTGTCGCTTGCTATATCATGGTACAACATGCGGCTACAAAGTTGAATTAGGTCTATATTGCGTGATGTCCTCGTTCAATCCGTATTAGCTCGCCACTACTTGGCCAATGCATCGCTTCTTTGCAAGTGATGTTGGGGGCGGCACATGGACACTGAACGCGGGGTTAAGAATGTGGCGTTACAGTTAAACGTGGAGTGCACTAGGCCCCAAAGTTTAGTTTATGATTTGCGTAGCAAGGGCGCCGTATTCTGGACATGGGAACTAACAACGCTTTGTTAAGTAGCACCCGGACTAATTAACGCCTCGTGCGCGTCTTTACGCGCCTCACTATAACTACCCCCCAGAGCAGGAGAGGCAGCACCGAGGTAACGATGTCGACGGGTCCCTACATAATGTCTAGATCATACTAAAAATCCTAGCCTGAGAGGCATATTGGCTTCTTCCTGGGTCGAAGGCTCACCTGGGTACTAGTCTCTCCGCCGTTCGAGCAGCGCCAGCACTGCGACGTAGTATCGCCCATTTTTTAGTGAAATAATATTGAGAAGGTTGTAATCACGCAAGATATTGACCTTGGGGTAAAATAGTATACAGAGTACCAACATTTGTGGCACCAATCCGCGGTTCGTGAGCCTTCTCACAGCGCCGGTACGCTTGGTGGGAGGCATGTCCTCCAACCATAGTCACCTATTATTTCTACTATACCATACGACGACGTAGTGCCTTTGTTTTTTTAACGACGGCCTTAATATACCTTGGGAGTCGGCTATTCTAGCAGGACCGTCGAGCGTCTAAGCGGAGAGACGTTTTGTGTCCACGACCTCAGGTCCATGCTACCGACCTTCGATCCGCTGCGGATGAAATCACATGTTTACAATGTACGAGGGCCTTCAGGGTGTGTACTTGCATCGTGGTACGCTCACGTTCCGCTATACCGTTGTACCGAGATCTAAATACTAAATCGCTGCAAACTATAGATGACCTCGAGAAGAGAGGGTAAGTTTCTCATATACTTATGGATGCCGCCACGGGTTCTTAGAGGTTACATATCGGAGCACCCACTACTGTAACTCTCTGAACTGATATGCTGCGTGCTAAGTCCATGCAAAGCTGTGTAGTGTTAGCACAAACAAGTTCGCTATAGGTCCCTTCCGTGGGAGGAGTGGACACTTCCGGCCGTATGAGCACATCTACTGAGAGCCCGCGGACTTTAGTCAAAGAGCATTCCCGGCTAGGGTGAGTTGACGGAGCACTTGGTATCCCTCCGGTGTAAGAGGAGAAAGCTAGTAATACCTTTTAGATCATCTCCTAGCGTAGGGCAGGGGACGATTCTCAGAACTCCCGAGACGGCTTCTTGTAGCCTTAGGGTACGTATACATAGCCGGTTCGAGCGACGTAGCAATGGGTAGCGCGAGCGTGCCCCAGAAGTCTAATTAGTGATGGCTAAAGATAAGATATATATATAAGATCGGTTAACTTCGTTTCAGTGTACTCGCTCTATACGGAGGTTTTCGTCGGTTCTCTAACACTTGTTAACGGTTTCTAAACGGCTTCTTGCACCTGAGGATCTTGTGTAGATTACGGTACAGTGAGGTTACTCAACGCGGAGTCCCCTCGCGATGCGCCGGCCGGTATCCTGTTCGGGCCGGGACACAGCGGATAATGATGCCAGGGGGACCAATAGTAGGACCCGCGCGGCGGGGTCTGCGCGCAAGATAGTCCTAAGTTACACTTAAACCACATAGTCGTATGGTCGGTTATCGCCGCGCCGTTCAAGAAACTGCATCGTTCGGTGAGCGACTTACTGTTACTGGACACCTAAAGATAAAATTGTTGCGAGTCATTAATAAAAAACACGGGATTAAAATCAGTCGCACGTGGGAGCATTACCACCCCGTTTCGGGCGAGGAGGGGGTTGCACCCGGCTCTCAACATTTGTGATGAGGAGTACATCCGTATTAGTTAGTTGTCTACCCACAGTAGCTTTAGAGACGACTATCCTAATGCGATCCCGACACGTAAACCACCTGCACGCAACTGCCGGCAGTTACTGGTCTCCTGCGCCCTGAATCAGCTTTTGATCTGATAAGATCCCACTGGTCTAAGCGATAAAGGTATAAAGAGACAAGTATTCAACGATTTCACAAAGGACCGGATCATGGTTGGCAATCTGGGGCTCCAACCGGTGGCACCTACGAGGCTAGCGAACGCGGGATGGCCTGTATACAACGTGACAATACCGGCTCTTCTCCCGACGGTAACGGTGTAATTTTCCCATTTGGACCTAATTGGATAGTCTCTCTGGCCTCCGTTGGCGCCGTAATGTTGCAGTATCCCAGGGTCGGATCGTTAAACCTTAGTTTTGCGCAAGATTGGAATTAGCTGCGGTCCGTGTCCCCAGGGATTGCCGTCAGCCGGTGGAATGCTCTAGGCGGCGGGAGTACTGTAGTAAGTATAGCCGCCGCGGCTTGCGAATCAGACCGACGTTGACGATTAAATTCCGCGCGCACTATACGGGTTTCCCGGCTAAGTCTCATTGTGGTAAGTTCTTCGTGCCAGGTAATCTCTATACCACATGCACCCTATCGAAGCATCACTGTAGCCAGCCTTGCATTGTATTGGTTTGTAGTGCTATCAGTGAACGCAAGATGCCCAAACCGAGGACCCCTGGTCAGTCTGGTAGTTCCGACCTTCAGCTCCAGGCATTAACTTGAACGAAGGACCGAACTCCATCGATAACCGTATGGCTCTTAAGGACGGCACTTACAATCGCTACGGATTCCCGTTAGCCAACGCGGGAACCAAAATATAGAGACTCGGTCGGGCACTCTGACCTGCTAGTAGGCTCATGGATTACGCCAGAATTCGTCGGACCTTACGAGAACCCTGTAAAAGTATCGGAGCGTAGCGTTGATCCCAGCCGAGTATTCCTTCTTAAACTATTTTCCTGAAGTGGATGGACTGAAAGTGTGACGAAAATAGAGAGCCCGGTATAGTACGGTGACAGGTGCATTGGAAATCGTGAAGGTAGCACTGCAGACTGCCTCGGCTTGCAGGGCTCAATAGTGGAGAGTGTATGGCTAACTATTAGGAACATCGCTCTAGGTGCCACTTTGCGGCATCCTCGTAGGGCGATGTGTACAGCGGGGAGTCCCCCCTTCAACCGGAGGACCGCACAGAGTAGGCTCGACATATCTGACTCCATACGCCGTTATAAACTCGAGGCATCGGACGTAACGACACACGTATGCATACAATAACGGGCTATATGAGATCCAGACCTACGAGGTGGGTCTGTGCGACGGTCTTACTGGAGAAGGGCGACGACCAATGACGGGTATCGTATGTGTATGATGACCTCATTGGTCGTGCTGTAATCTACCACGGTCTACGGGGGCATATCCCTTGTATAAGTGTCGAGAAGGGACCCGCTGCCACGCAAGAGATTCAATATAACTAACACTGACTCCGCCCGCTCCATCGAGCCCGGTGACATATTAGGAACATAAATGAACCTTCCGATGCGGTAGGGTGCTGACCCTCCTAGAGTCGGACATTTTTCTATGCCTCTTTAAATATACGTACACGGGCTGTAGAAACTCGAATTACTGCGATGCTTCTTAGGCTGAGGTAGTTGCTATAAATACGCGATGCAGAATTATTGCCCGTGCACAGGGACTGCCAGCGGTCGATACACTGTGTCACTCTATTGAAGGTACTGCGTGTTAATACTTGGGCGGTTTGAGCGGGACCACTGCTCAGAGTCTAGTATGTGGGTTAGTCCCCTGCGTCAACCGGTGGTCGGCAACTGGTGACCGGGACACAGGCTGACGGGTAGGGACTTACCTCGGATTGATACGCCTCTCATTACGGCGAAGGAATAGACTGGTGCACCGGATATAAAGATTTTTACTAATGGCCGCCAACCGGTAAAGAGCGGAAGTCATCACGTGGTCCTAGCGGGAAAAGGCGAGGTCATTGAGGAATCCGTTTGTCCTGATCCGAGGAAACGACCGTTGTGTTCGCGGTTCAAGTTAATCTACCGTAGAACAAAAAGCCTATATTAGGCTTTCTTTGAATGCGAGTGTAGGCCCCTGTAGCCGGGGAGGTGGTGGAGGTAGGGAGTTTCACGGCTACACCTACCGGCTGGTACCTGCCGGGGACTCGTCCCGGTACCGAGCTTGCCCTGCACGTTAGCCGAATATGTATTGCTAACTTTCGAACAACATGGTCCTGATGAATAATCCTCCAAGAAGATTTACGCTTCGCCTTGACGGAAGATTTTCGGGGGAGATTCTACATGTCGAGGCGCGCGCATCGGAAGCTTTAGTATGGCGTATTTCCACGTGCTAATCGGAGGAAACAGTATTAGAGAGTCGTTAATCCCTTTATGCGAGAAGAAGATTTTCGTTTTCACCTCAACCCACGAGGGGTCGCACTCTGTGTTTGAATTGTTAACGCTGACACCCTCTGGGAAACGTTATTATTCTTACTATCAAACCGCCAAGATCCAGAACGAAACAAAGGGTCACAGCATCTGTAGATCAGAATTTGAACTCGTGCTGGCCTAAACACCTATTCGTCAATGAGGTGCCTCATTTGTCCAATTCTCTTTAATCCGCTAGCTTTTCTAGCACGTGGCTGGACGAATGTTTCGACCTCTCCACAAGTACGATCCAAAGGTCTCAGAGTAGGCCGACGGTACGAGGGGCCATCCTCCGGCGTGCGGGATCTGTCTAATCACGAAGGTTGACGCTTCATAAAAGAAGAATTCAAACCTTTATGCCTCCATCCGCTTTCTAAGCTCAATTGTTTAACTTACCAAGCGGCTTTAAGTAATATTACCTACGTGTTATAGTTCGAGTAGGTCCGCCCACACCCTCCCATTAGACTCGGGGTTAACTACCGAAGCCGAACGTACCGCCCAGTAGACCTGACACTTAACACGGATGATGTCTGGCCGGAGCGACAGAGGGTGGCATAACAGTCCCGTGCCCTTTCAAAGCACTTGGTTGGTACCGTTGCAACCGTTTCACTAGAGTTCATGTAGATAGCTCATGTTAGTGGCTCCTTCCAAGTCTACAGGTTCCCCGTGAGCGTCAGGGGGTCGACCGCAGTGTCCTAGCACAAATCGCATTGCACCTTGGCACTGGCTATTCGTTATTCTCTGAGACCCCAGACAGTTCTTACAGATCGGTAGGCCAAAGGCGTACCTCTCCCTTTCTTTGTGACTCTTACGTCCGCAAAATTTCACATTCCGCTTAGATATGCTAGAGTCGAAACGCAGGGCGGCGTTAGAAGATGCCTTAAGGCCTACATAACGAAATAGACTAAGGCGGTACTATCAAGAGACTCCGCTCTACCGTATACGGTCTCGGGGGGACCTAGTGCCTTTATGCAAGAATTAACCAGGAGGATGCCACGGGCACTTCTGCGTACGTACGCAATGGTTACGCATGCGCTAACGTTGTGCGTTAAGGCATGTATGGCAATCTCCCCAGGACTGGGCTCTGGATTTCATAAGTGAAGTGCGGGTCACCATGGACCCACGAGACGCCCTCTTCCATGACTAGATGTAAACCCACACATCCTCAAGTCTAACTGGGAATCTTGTTTGAATAGCCGTCTCGATCAAGCAGGATACAACAGATTGCCGTGCCGCGTCGCCACGACCCCTGATATGTTGCTTGTAGATACGCTATCCTCAGCGGCAGCCTGAAGCCACTTCTCGCGATTTCATACGGGGGCTCGTTCGATATCCCTCGCACGTGAGGAAGATCTCCACCTGCAGTACGCCGGTAAGTCATGACCCCGCTCCTCGTGTATATTTGGAAGTGCCCTCCGTCGCATATAGATGGCTCCATCCGTCCTCGCATGCGGAACTCTCTTGGGTGGAGACGAAGTTTTTCTATCACAACTGCTGGCTTGCCACTCTTAGGATTTAGTGGCGAGTACATCGATGGAGGCCCCAGTTTTTACCAGGCTTCTATACGTGTGGGCTGTGCCCAGCAGCGATAGTCGTAACAACTGATAGAGTGCATTACCAGTACACGACTTGGTAGCTTATGTGCCGTGGGCGGGCCGGGCCGAACAGAGTCGGTGATATGCCTAATTGTCGCCACTTACCATTTTTGTTAGACATACTTAGTCCAATGCTGTCCATTAAGCCGGGCGTGAGCGTCCCTTCCCAAGCGGTGCACAGATATAATAGGGACGCCTAGTGAGGGGTGAAAGGGGAGACCGCGAAATGTCAGGTAGGCTTCACGCCAAGTTAAGCTTACTAAATGGCGATATTTGGCTGATTCGCGCTGACCATACGGGTCCCTCCCAATCGACTCGAGGCGACGATAAATCACTGAATATCAGCCCGTAAATGGTTCCAGTCTTGGATGGGCAAACTAACCCGTCCCCCGCGGCAAGAACTTAAGTACCCGTTTTCCTGCTCAAGGTTCCAGGTTCGACCGACAGACATGATAGTGTTACCTCACGCCGACCTGAAGGCAACGTTGATTACAGGGAAGCTAGTACACGCACGTCAAATCCGCTTTCGCAACGCAAGGATGTCCTACGTTTGACCCCGGGTCCCACAAGTTTCTATATACGAGTCCGTAAGAACGGAGGACAACGGACCGGCCACTAGTTTAGCCGGCTTCCGTATGGTTAAAGCGCATTATTCCCGTGTCGAAGTACCAGCACGGTTGTCCGTTGGCCCACCGCGCCGACGTAGGCGAGGCAGATAACTGTGCTTCCTGGTTAATCGCACGCTTATCTGGGGGGTACGAGAACTGTTGTTATATACCACTTTTAGCCACTATCACCGATACGTATCTCTGTCCGGCTATGCGCAAATCGATGAGGTAAGCGCAAGCTAACTTCACGTTTTCATCACTACGCCAGATTGACGGCTCTCGGCTTCGGCATCATGGCTGCTATAGTCTCATTACTAGCAGCGGCACTGTTCTGGCAATTCGTCGTGACCGCGCTTCAACCGCCTGCTAGTTGGAGCAATCACATCAGCTAAAGTATAGTTAGCGCGTGTACCGGTAATATCGTAGCAGCAAGATAGCCCTCAACACAGTCGGTTTCGAATTGGAAAGGCACGCGTACAACGGCTCTCACACGACAGTATTGGCTCTAAGAATGACAGCTCGCAACCTATACTCGGACGATTAGCCGGATTCACATTAGTGGACATATGTGTGGGACCAAGCAAATGCAATTAGTTCGTCACCTTTGCCCACTTACTTCGCGCCATCGCCCTTGTCTCCAACGTAATGTTGAATGGACTTCAGCGCCCTCAGCTCACAAGTCAATTGCTAGCGGGGATTCCGACGCTGTATACATCCCTATGTTATGGGCCTGGGGCCTGTGTGGGAGGCCATCATAACCCGGTAAGCGTCAGGCCAGCGTTCTGTGGGATCTGGTTATACATGCCGCAGAAATCGTTGATGCCATTCCATTCAGAGACATGTGTTCAGCCTGGGGGTGATATTGCTGCTCCGCGGTACAACCGAAGCTCAAGGCAGTAGTGTTTGGCAATCCAGATAACTGATCTATAAGCACGCCGGTTGCCGCCATATCCGCATGAACTATACGAAGATCGTTCGCAAATGTAGTTCTGAGTCTTGCATCAGCTGGCGGCATGAACACGAAGACTATTCTGCTCAGTTTCGCAGCACCCGCACTCAATATAGTCGGTCGCTAAGTTGCCAATGTCCGTAACGTTCACGTACTTCTCACGATGGGCCAGGCTTATAGTTTTTCCCTGTACTGCTCATTGATGTTTAGGCATGGGTTAGTTCTTATTAATCGAGCGGACACGAAGGTGCGATCTCCTGTAAAGAACCAAATCACAAAGGCCCCGGGCAGACGCAAATCATAACGACTCTATATTTCGCTTGCCCTCAGAATAGTTGAGGTTGCTTTTACATTTTGTGGCCGACGGACAACCCAGAGACGGGGCAAGAATGGCTGAATTATACAGGCGAAAGCGTTTATGACCTGATCATGAGGGGCTTCTAGTGCGGTAAAACAGCGGACGCCCCCGCACTCGATTAGGGCAAGGGCCTTCTCGATGGGAGCCGATGTCCGTCTGCGAATAAGTGCATAAAACAACGCCATAGGCCAGGGACACGTGAACGGCCCCTTTTGTATTTGGGGCCTCGGGTAACATCGACTTTTCCCGGCCGATCAAGACGTACGTTATGCTATTGCCAGCATGTTACGTTGATCCTAAAGGACGAAATGACTATGAGATCAGTTAGCTGCATTGAACACAACCTTAATAGAACCGTAAAGAGCCTCACACCATACTTTTGTCCAAATACTTTGGGAAGCGGTAAGGAACTGATCGTTCAAGTCGAGGGGCTGTTTGTAGGATGTGTTGTTAGAGGCTAGCGGGAGAACTCAGGTGGTGTGTGCCAGGGGAACCGATATCGACGCGAAAGGCTTCACGTTGGCATAGA'
t = 'TAGCAGGGCCAAAAGTTAGAAACCCGATTACACCTACTGATGTGTTTCAAGGATAGTCAGGCATTGCTGGACACTGGCGGAAATCATGCACCCTTAACGTTACATCGTCACAGGCCCACAGCCAGGTCGTTCGATGCCCAATGTGGTTATTACCAAAGTTACGCTAGTACGCCAAGCCCAAAGAGGTCTCCACACGATTCGGTAAACCGATACGAGTAAGGAATGCCATTGTATTTGGAGCTCGATTATAGGAGATTTACTTCTAGTCGGCGCCTAAGGTTCCGGCTCTACTTAGCGAGCTAACCGCAGGACGTAGGTGGTAGCCGGCAGTTCCGTTTAGAGTCGATTCGAGCTTCTCAATCGAAAAACCCAGGGTATCACGATATGCGTCTCCCGGCCGAGCCAGATCAAGCCAGGCCGGCCCAGTGGAAATAAGAAGAATGGACAGTTCGCCCATCGGATCCTCGGGTTTAGGTACTTTTTATTGTTCTACCTCTTTGCAATTGAGCGGAAACACCCTCGCTTCTACAAGATCTAAAAGCGCTGGTAATCTGTGGGCTTTGATAGACGCAAGCGTGAGAAGATCCGTGAACCAAACAGGCGCGATTGAAGGCGGTGTAAGGGGACCTGGATACATTGTTGTGGTCTGTGACTCAGTATATGCATAGTCCGTTAGGATGCATGTATGGTCATACCCATCGGGGACACCGGCGTCTTAGTCCACTACTTTCCAAATGCCGGAGTGCTCGTGTTTGGCCGTTCCAACATGCTGATTAAGTGAGAGTAACTACAGACCAGACTCGAGAAGATAAACATCCGATGAGTATAGAGATCGCTCCGTGTTAGGGAGTATATCCAGGCTAAACCGCAAGAACGACGAGATGATAATGTAGGACTAAGACGTTATCGTGTTGTGGCCCACTAATGAACTAAATTCGTATCGGGGGCCGAACATGCTCGATTTCGTTCTG'
score_matrix, s_aligned, t_aligned = find_mutated_motif(s, t)
print(score_matrix)
print(s_aligned)
print(t_aligned)
